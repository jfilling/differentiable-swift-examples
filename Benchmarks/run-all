#! /bin/bash

# Install the pytorch environment (if needed) and run benchmark
echo -n "Running PyTorch benchmark ..."
if [ -f pytorch-cpu/bin/activate ]; then
    source pytorch-cpu/bin/activate
else
    python3 -m venv pytorch-cpu
    source pytorch-cpu/bin/activate
    pip install torch torchvision
fi
cd ./BuildingSimulation/PyTorch/
python3 PyTorchSimulator.py >../../pytorch.txt 2>&1
cd - >/dev/null
deactivate
echo " done"

# Install the tensorflow environment (if needed) and run benchmark
echo -n "Running TensorFlow benchmark ..."
if [ -f tensorflow-cpu/bin/activate ]; then
    source tensorflow-cpu/bin/activate
else
    python3 -m venv tensorflow-cpu
    source tensorflow-cpu/bin/activate
    python3 -m pip install wheel
    pip install tensorflow
fi
cd ./BuildingSimulation/TensorFlow/
python3 TensorFlowSimulator.py >../../tensorflow.txt 2>&1
cd - >/dev/null
deactivate
echo " done"

# Compile and run Swift benchmark
if [[ "$OSTYPE" == "darwin"* ]]; then
    SWIFT=/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-12-07-a.xctoolchain/usr/bin/swift
else
    SWIFT=/usr/bin/swift
fi

if [ ! -x $SWIFT ]; then
    echo "Missing $SWIFT"
else
    echo -n "Running Swift benchmark ..."
    cd ./BuildingSimulation/Swift
    $SWIFT run -c release >../../swift.txt 2>&1
    cd - >/dev/null
    echo " done"
fi

p=$(printf "%.12f" $(grep gradient pytorch.txt | cut -d' ' -f8))
t=$(printf "%.12f" $(grep gradient tensorflow.txt | cut -d' ' -f8))
s=$(printf "%.12f" $(grep gradient swift.txt | cut -d' ' -f7))

echo -n "PyTorch"
echo -n " "$p
printf " [%.3f]\n" $(echo "$p/$s" | bc -l)

echo -n "TensorFlow"
echo -n " "$t
printf " [%.3f]\n" $(echo "$t/$s" | bc -l)

echo -n "Swift"
echo -n " "$s
printf " [%.3f]\n" $(echo "$s/$s" | bc -l)

